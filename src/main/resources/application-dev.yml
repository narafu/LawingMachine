# local

spring:
  config:
    activate:
      on-profile: dev

  servlet:
    multipart:
      #      enabled: true # 멀티파트 업로드 지원여부 (default: true)
      #      file-size-threshold: 1MB #  파일이 메모리에 기록되는 임계값 (default: 0B)
      #      location: C:/Temp # 업로드된 파일의 임시 저장 공간
      location: /Users/phs/development/attch/lawingMachine # 업로드된 파일의 임시 저장 공간
      max-file-size: 100MB # 파일의 최대 사이즈 (default: 1MB)
      max-request-size: 100MB # 요청의 최대 사이즈 (default: 10MB)

  datasource:
    driver-class-name: org.postgresql.Driver
    # docker-compose.yml의 ${POSTGRES_PORT}와 ${DB_ROOT_USER}에 설정한 값으로 포트와 DB이름을 수정해주세요.
    # POSTGRES_DB를 따로 설정하지 않았다면 DB 이름은 POSTGRES_USER와 같습니다.
    url: jdbc:postgresql://localhost:5432/postgres
    # docker-compose.yml의 ${DB_ROOT_USER} 값으로 변경해주세요.
    username: root
    # docker-compose.yml의 ${DB_ROOT_PASSWORD} 값으로 변경해주세요.
    password: root

  jpa:
    hibernate:
      # DB 스키마가 이미 생성되어 있다면 validate, 없다면 create 또는 update로 변경하세요.
      ddl-auto: validate
    generate-ddl: true
    show-sql: true
    defer-datasource-initialization: true

  sql:
    init:
      # PostgreSQL에 맞는 데이터 초기화 스크립트가 있다면 경로를 지정해주세요.
      # data-locations: classpath:db/data-postgresql.sql
      mode: never
      platform: postgresql

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_SECRET}
            scope: profile, email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_SECRET}
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-authentication-method: POST
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 네이버가 회원정보를 json으로 넘겨주는데, response라는 키값으로 리턴해준다.
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id # 카카오가 회원정보를 json으로 넘겨주는데, id라는 키값으로 리턴해준다.

#springdoc:
#  api-docs:
#    version: openapi_3_0
#    path: /local
#    groups:
#      enabled: true
#  swagger-ui:
#    path: /swagger-ui.html
#    display-request-duration: true
#    groups-order: DESC
#    operationsSorter: method
#    disable-swagger-default-url: true
#  show-actuator: true
#  group-configs:
#    - group: stores
#      paths-to-match: /store/**
#    - group: users
#      packages-to-scan: org.springdoc.demo.app2
